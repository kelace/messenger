// <auto-generated />
using System;
using Chat.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Chat.Infrastructure.Migrations.Main
{
    [DbContext(typeof(ChatDbContext))]
    partial class ChatDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Chat.Domain.Entities.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("fromId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("toId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("fromId");

                    b.HasIndex("toId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Chat.Domain.Entities.Offer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("Chat.Domain.Entities.Relation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Relations");
                });

            modelBuilder.Entity("Chat.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Chat.Domain.Entities.Message", b =>
                {
                    b.HasOne("Chat.Domain.Entities.User", "from")
                        .WithMany("SendedMessages")
                        .HasForeignKey("fromId");

                    b.HasOne("Chat.Domain.Entities.User", "to")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("toId");
                });

            modelBuilder.Entity("Chat.Domain.Entities.Offer", b =>
                {
                    b.HasOne("Chat.Domain.Entities.User", "Receiver")
                        .WithMany("ReceivedOffers")
                        .HasForeignKey("ReceiverId");

                    b.HasOne("Chat.Domain.Entities.User", "Sender")
                        .WithMany("SendedOffers")
                        .HasForeignKey("SenderId");
                });

            modelBuilder.Entity("Chat.Domain.Entities.Relation", b =>
                {
                    b.HasOne("Chat.Domain.Entities.User", "Receiver")
                        .WithMany("ReceivedRelations")
                        .HasForeignKey("ReceiverId");

                    b.HasOne("Chat.Domain.Entities.User", "Sender")
                        .WithMany("SendedRelation")
                        .HasForeignKey("SenderId");
                });
#pragma warning restore 612, 618
        }
    }
}
